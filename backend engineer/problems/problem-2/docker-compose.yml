version: '3.8'

services:
  # ===== INFRASTRUCTURE SERVICES =====
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_postgres
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce_network

  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce_network

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: ecommerce_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ecommerce_user
      RABBITMQ_DEFAULT_PASS: ecommerce_password
      RABBITMQ_DEFAULT_VHOST: ecommerce_vhost
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecommerce_network

  # ===== MICROSERVICES =====
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: ecommerce_api_gateway
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://ecommerce_user:ecommerce_password@rabbitmq:5672/ecommerce_vhost
      - USER_SERVICE_URL=http://user-service:8001
      - PRODUCT_SERVICE_URL=http://product-service:8002
      - ORDER_SERVICE_URL=http://order-service:8003
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce_network

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: ecommerce_user_service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://ecommerce_user:ecommerce_password@rabbitmq:5672/ecommerce_vhost
      - SECRET_KEY=your-secret-key-here
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce_network

  product-service:
    build:
      context: .
      dockerfile: ./product-service/Dockerfile
    container_name: ecommerce_product_service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://ecommerce_user:ecommerce_password@rabbitmq:5672/ecommerce_vhost
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce_network

  order-service:
    build:
      context: .
      dockerfile: ./order-service/Dockerfile
    container_name: ecommerce_order_service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://ecommerce_user:ecommerce_password@rabbitmq:5672/ecommerce_vhost
      - USER_SERVICE_URL=http://user-service:8001
      - PRODUCT_SERVICE_URL=http://product-service:8002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started
    networks:
      - ecommerce_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  ecommerce_network:
    driver: bridge

